# =============================================================================
#  Docker Compose file for testing on Go versions 1.19 to latest.
# =============================================================================
#  This file is somewhat similar to makefile, but for Docker.
#
# Recommended usage:
#   # Update go modules to the latest version.
#   docker compose --file ./.github/docker-compose.yml run tidy
#   # Run the lint and static analysis tools.
#   docker compose --file ./.github/docker-compose.yml run lint
#   # Run the vulnerability scanner.
#   docker compose --file ./.github/docker-compose.yml run vuln
#   # Run the tests on Go v1.19.
#   docker compose --file ./.github/docker-compose.yml run v1_19
#   # Run the tests on latest Go docker image.
#   docker compose --file ./.github/docker-compose.yml run latest
#
# NOT recommended usage:
#   docker compose --file ./.github/docker-compose.yml up
#
# Notes:
#  It is recommended to run specifying a specific service and not at once.
#
#  Since the service `tidy` will update/re-write the "go.mod" file to the latest
#  version, during it's process the "go.mod" file will be gone temporarily. Thus,
#  it will cause failure in the other containers becaue of missing "go.mod" file.

volumes:
  GO_MOD_CACHE:

services:
  # Service lint runs the lint and static analysis tools.
  # For the configuration see: ../.golangci.yml
  lint:
    image: golangci/golangci-lint
    working_dir: /workspaces
    volumes:
      - ..:/workspaces
      - GO_MOD_CACHE:/go/pkg/mod
    entrypoint: [ "golangci-lint", "run", "--timeout=5m" ]
  # Service tidy updates the module versions in go.mod to the latest.
  tidy:
    build:
      context: ..
      dockerfile: ./.github/Dockerfile
      args:
        VARIANT: 1.23-alpine
    volumes:
      - ..:/workspaces
      - GO_MOD_CACHE:/go/pkg/mod
    entrypoint: [ "./.github/update-go-mod.sh" ]
  # Service vuln runs the vulnerability scanner.
  vuln:
    build:
      context: ..
      dockerfile: ./.github/Dockerfile
      args:
        VARIANT: alpine
    volumes:
      - ..:/workspaces
      - GO_MOD_CACHE:/go/pkg/mod
    entrypoint: [ "make", "install", "vuln" ]
  # Service min runs the tests on Go v1.23 which is the minimum supported
  # version.
  min:
    build:
      context: ..
      dockerfile: ./.github/Dockerfile
      args:
        VARIANT: 1.23-alpine
    volumes:
      - ..:/workspaces
      - GO_MOD_CACHE:/go/pkg/mod
  # Service latest runs the tests on latest Go docker image.
  latest:
    build:
      context: ..
      dockerfile: ./.github/Dockerfile
      args:
        VARIANT: alpine
    volumes:
      - ..:/workspaces
      - GO_MOD_CACHE:/go/pkg/mod
